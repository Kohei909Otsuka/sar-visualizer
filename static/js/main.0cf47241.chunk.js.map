{"version":3,"sources":["utils/constant.js","components/Header.js","libs/jsonFileParser.js","components/Uploader.js","components/History.js","components/Graph.js","utils/date.js","db.js","libs/usecase.js","components/App.js","serviceWorker.js","index.js"],"names":["solarized","StyledHeader","styled","div","_templateObject","LinkWrapper","_templateObject2","HeaderLink","button","_templateObject3","props","active","Header","mode","onChangeMode","react_default","a","createElement","onClick","formatTime","src","timestamp","date","time","convertCpu","cpu","user","usr","nice","system","sys","iowait","steal","idle","convertMem","mem","memory","free","Math","floor","KbToMb","memfree","used","memused","used_percent","buffers","cached","kb","jsonFileParser","jsonString","idGen","firstHost","JSON","parse","sysstat","hosts","metaData","id","nodename","sysname","release","machine","number_of_cpus","file_date","statistics","forEach","stat","push","Object","assign","Wrapper","Uploader_templateObject","Date","getTime","toString","random","Uploader","setMode","setStat","saveStat","es","onDropAccepted","files","console","log","reader","FileReader","onload","text","result","file","name","readAsText","onDropRejected","_ref","getRootProps","getInputProps","Table","table","History_templateObject","TableHeader","thead","History_templateObject2","TableBody","tbody","History_templateObject3","TableRaw","tr","_templateObject4","TableBodyRaw","_templateObject5","TableHeaderCell","th","_templateObject6","TableBodyCell","td","_templateObject7","History","stats","onClickStat","onDeleteStat","map","onRawClick","key","index_es","icon","faTrash","renderItems","colors","Title","p","Graph_templateObject","Graph","data","kinds","title","_useState","useState","_useState2","slicedToArray","activeKeys","setActiveKeys","LineChart","width","height","XAxis","dataKey","YAxis","Tooltip","Legend","e","includes","filter","akey","concat","kind","i","color","length","Line","type","stroke","dot","formatDate","y","getFullYear","m","getMonth","d","getDate","h","getHours","mm","getMinutes","s","getSeconds","with0","num","db","Dexie","version","stores","seedCpus","count","baseTime","Array","fill","x","seedMems","on","now","add","open","createStat","then","StyledBody","App_templateObject","GraphWrapper","App_templateObject2","App","_useState3","_useState4","_useState5","_useState6","setStats","useEffect","toArray","body","onSelectStat","get","fetchStat","delete","deleteStat","components_Header","components_Uploader","components_History","keys","components_Graph","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0cf47241.chunk.js","sourcesContent":["// refer from https://ethanschoonover.com/solarized/\nexport const solarized = {\n  base03: \"#002b36\",\n  base02: \"#073642\",\n  base01: \"#586e75\",\n  base00: \"#657b83\",\n  base0:  \"#839496\",\n  base1:  \"#93a1a1\",\n  base2:  \"#eee8d5\",\n  base3:  \"#fdf6e3\",\n  yellow: \"#b58900\",\n  orange: \"#cb4b16\",\n  red:    \"#dc322f\",\n  magenta: \"#d33682\",\n  violet: \"#6c71c4\",\n  blue:   \"#268bd2\",\n  cyan:   \"#2aa198\",\n  green:  \"#859900\",\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { solarized } from './../utils/constant.js';\n\nconst StyledHeader = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  height: 40px;\n`;\n\nconst LinkWrapper = styled.div`\n  width: 400px;\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst HeaderLink = styled.button`\n  background: ${ props => props.active ? solarized.cyan : \"white\" }\n  color: ${ props => props.active ? \"white\" : solarized.base1 };\n  font-size: 1.5em;\n  padding: 0.25em 1em;\n  border-radius: 4px;\n  border: transparent;\n`\n\nconst Header = (props) => {\n  const { mode, onChangeMode } = props;\n\n  return (\n    <StyledHeader>\n      <LinkWrapper>\n        <HeaderLink\n          active={mode === \"upload\"}\n          onClick={() => onChangeMode(\"upload\")}\n        >\n          Upload\n        </HeaderLink>\n        <HeaderLink\n          active={mode === \"history\"}\n          onClick={() => onChangeMode(\"history\")}\n        >\n          History\n        </HeaderLink>\n      </LinkWrapper>\n    </StyledHeader>\n  );\n};\n\nexport default Header;\n","const jsonFileParser = (jsonString, idGen) => {\n  const original = JSON.parse(jsonString)\n  const firstHost = original.sysstat.hosts[0];\n\n  const metaData = {\n    id: idGen(),\n    nodename: firstHost.nodename,\n    sysname: firstHost.sysname,\n    release: firstHost.release,\n    machine: firstHost.machine,\n    number_of_cpus: firstHost['number-of-cpus'],\n    file_date: firstHost['file-date'],\n  };\n\n  const statistics = {cpu: [], memory: []};\n\n  firstHost.statistics.forEach(stat => {\n    statistics.cpu.push(convertCpu(stat));\n    statistics.memory.push(convertMem(stat));\n  });\n\n  return Object.assign({}, metaData, { statistics });\n};\n\nconst formatTime = (src) => (\n  src.timestamp.date + ' ' + src.timestamp.time\n);\nconst convertCpu = (src) => {\n  const cpu = src['cpu-load-all'][0];\n  return {\n    timestamp: formatTime(src),\n    user: cpu.usr,\n    nice: cpu.nice,\n    system: cpu.sys,\n    iowait: cpu.iowait,\n    steal: cpu.steal,\n    idle: cpu.idle,\n  };\n};\n\nconst convertMem = (src) => {\n  const mem = src.memory;\n  return {\n    timestamp: formatTime(src),\n    free: Math.floor(KbToMb(mem.memfree)),\n    used: Math.floor(KbToMb(mem.memused)),\n    used_percent: mem['memused-percent'],\n    buffers: Math.floor(KbToMb(mem.buffers)),\n    cached: Math.floor(KbToMb(mem.cached)),\n  };\n};\n\nconst KbToMb = (kb) => {\n  return (kb / 1000);\n};\n\nexport default jsonFileParser;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Dropzone from 'react-dropzone';\nimport { solarized } from './../utils/constant.js';\nimport jsonFileParser from './../libs/jsonFileParser';\n\nconst Wrapper = styled.div`\n  height: 70vh;\n  border-width: 2px;\n  border-radius: 5px;\n  border-color: ${ solarized.base1 };\n  border-style: dashed;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${ solarized.base1 }\n  font-size: 2.0em;\n`;\n\n// TODO: move idGetn to data strage module\nconst idGen = () => {\n  const now = new Date()\n  return now.getTime().toString(16) +\n    Math.floor(10000 * Math.random()).toString(16)\n};\n\nconst Uploader = (props) => {\n  const { setMode, setStat, saveStat } = props;\n\n  const handleFileAccepted = (files) => {\n    console.log('success file', files);\n    const reader = new FileReader();\n    reader.onload = () => {\n      const text = reader.result;\n      let stat = jsonFileParser(text, idGen);\n      stat.file = files[0].name;\n      console.log('loaded file content', stat);\n      console.log('loaded file object', files[0]);\n\n      // 1. update state of app\n      setStat(stat);\n      setMode(\"visualize\");\n      // 2. save to indexexDB\n      saveStat(stat);\n    };\n    reader.readAsText(files[0]);\n  };\n\n  const handleFileRejected = (file) => {\n    console.log('fail file', file);\n  };\n\n  return (\n    <div>\n      <Dropzone\n        onDropAccepted={handleFileAccepted}\n        onDropRejected={handleFileRejected}\n      >\n        {({getRootProps, getInputProps}) => {\n          return (\n            <Wrapper\n              {...getRootProps()}\n            >\n              <input {...getInputProps()} />\n              Drag and drop here\n            </Wrapper>\n          );\n        }}\n      </Dropzone>\n    </div>\n  );\n};\n\nexport default Uploader;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { solarized } from './../utils/constant.js';\n\n//time, file name, os, machine, cpus\nconst Table = styled.table`\n  font-size: 1.2em;\n  text-align: left;\n  border-collapse: collapse;\n  margin-left: auto;\n  margin-right: auto;\n`;\nconst TableHeader = styled.thead`\n  color: ${ solarized.base01 };\n`;\nconst TableBody = styled.tbody`\n  color: ${ solarized.base1 };\n`;\nconst TableRaw = styled.tr`\n  border: solid 1px;\n`;\nconst TableBodyRaw = styled(TableRaw)`\n  :hover {\n    background: ${ solarized.cyan } !important;\n    color: white;\n  }\n`;\nconst TableHeaderCell = styled.th`\n padding: 20px;\n`;\nconst TableBodyCell = styled.td`\n padding: 20px;\n`;\n\nconst History = (props) => {\n  const { stats, onClickStat, onDeleteStat } = props;\n\n  const renderItems = (stat) => {\n    const onRawClick = () => (onClickStat(stat.id));\n    return (\n      <TableBodyRaw key={stat.id}>\n        <TableBodyCell onClick={onRawClick}>{stat.file_date}</TableBodyCell>\n        <TableBodyCell onClick={onRawClick}>{stat.file}</TableBodyCell>\n        <TableBodyCell onClick={onRawClick}>{stat.sysname}</TableBodyCell>\n        <TableBodyCell onClick={onRawClick}>{stat.machine}</TableBodyCell>\n        <TableBodyCell onClick={onRawClick}>{stat.number_of_cpus}</TableBodyCell>\n        <TableBodyCell>\n          <FontAwesomeIcon icon={faTrash} onClick={() => onDeleteStat(stat.id)}/>\n        </TableBodyCell>\n      </TableBodyRaw>\n    );\n  };\n\n  return (\n    <Table>\n      <TableHeader>\n        <TableRaw>\n          <TableHeaderCell>time</TableHeaderCell>\n          <TableHeaderCell>file</TableHeaderCell>\n          <TableHeaderCell>os</TableHeaderCell>\n          <TableHeaderCell>machine</TableHeaderCell>\n          <TableHeaderCell>cpus</TableHeaderCell>\n          <TableHeaderCell></TableHeaderCell>\n        </TableRaw>\n      </TableHeader>\n      <TableBody>\n        { stats.map(stat => (renderItems(stat))) }\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default History;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport {\n  LineChart,\n  Line,\n  YAxis,\n  XAxis,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { solarized } from './../utils/constant.js';\n\nconst colors = [\n  solarized.yellow,\n  solarized.orange,\n  solarized.red,\n  solarized.magenta,\n  solarized.violet,\n  solarized.blue,\n  solarized.cyan,\n  solarized.green,\n];\n\nconst Title = styled.p`\n  color: ${ solarized.base1 };\n  font-size: 1.2em;\n`;\n\nconst Graph = (props) => {\n  const { data, kinds, title } = props;\n  const [activeKeys, setActiveKeys] = useState(kinds);\n\n  const toggleKey = (key) => {\n    if (activeKeys.includes(key)) {\n      setActiveKeys(activeKeys.filter(akey => akey !== key))\n    } else {\n      setActiveKeys(activeKeys.concat([key]))\n    }\n  };\n\n  return (\n    <div>\n      <Title>{title}</Title>\n      <LineChart width={1200} height={300} data={data}>\n        <XAxis dataKey=\"timestamp\"/>\n        <YAxis/>\n        <Tooltip/>\n        <Legend onClick={e => toggleKey(e.dataKey)}/>\n        {\n          kinds.map((kind,i) => {\n            const color = activeKeys.includes(kind) ?\n              colors[(i+1)%colors.length] : 'transparent';\n            return (\n              <Line\n                key={kind}\n                type=\"monotone\"\n                dataKey={kind}\n                stroke={color}\n                dot={false}\n              />\n            );\n          })\n        }\n      </LineChart>\n    </div>\n  );\n};\n\nexport default Graph;\n","export const formatDate = (date) => {\n  const y = date.getFullYear();\n  const m = date.getMonth();\n  const d = date.getDate();\n  const h = date.getHours();\n  const mm = date.getMinutes();\n  const s = date.getSeconds();\n\n  return `${y}-${with0(m)}-${with0(d)} ${with0(h)}:${with0(mm)}:${with0(s)}`\n}\n\nconst with0 = (num) => {\n  return num < 10 ? `0${num}` : `${num}`\n}\n","import Dexie from 'dexie';\nimport { formatDate } from './utils/date';\n\nconst db = new Dexie('sar');\n// index only id, cuz there is nothing to search by field\ndb.version(1).stores({\n    stats: `id`\n});\n\nconst seedCpus = (count, baseTime) => {\n  return Array(count).fill().map((x,i) => {\n    const time  = new Date((baseTime.getTime() + (i+1) * 60 * 1000));\n\n    return {\n      timestamp: formatDate(time),\n      user: Math.floor(100 * Math.random()),\n      nice: Math.floor(100 * Math.random()),\n      system: Math.floor(100 * Math.random()),\n      iowait: Math.floor(100 * Math.random()),\n      steal: Math.floor(100 * Math.random()),\n      idle: Math.floor(100 * Math.random()),\n    };\n  });\n};\n\nconst seedMems = (count, baseTime) => {\n  return Array(count).fill().map((x,i) => {\n    const time  = new Date((baseTime.getTime() + (i+1) * 60 * 1000));\n    const max = 10000;\n    const min = 500;\n\n    return {\n      timestamp: formatDate(time),\n      free: Math.floor(Math.random() * (max - min)) + min,\n      used: Math.floor(Math.random() * (max - min)) + min,\n      used_percent: Math.floor(100* Math.random()),\n      buffers: Math.floor(100* Math.random()),\n      cached: Math.floor(1000* Math.random()),\n    };\n  });\n};\n\n// import seed data\ndb.on('populate', () =>{\n  const now = new Date();\n\n  db.stats.add({\n    id: 1,\n    nodename: 'localhost',\n    sysname: 'Linux',\n    release: '1.7.0',\n    machine: 'x86_64',\n    number_of_cpus: 1,\n    file_date: '2019-02-09',\n    file: 'cpu_test.json',\n    statistics: {\n      cpu: seedCpus(50, now),\n      memory: seedMems(50, now),\n    }\n  });\n  db.stats.add({\n    id: 2,\n    nodename: 'remotehost',\n    sysname: 'Linux',\n    release: '1.7.0',\n    machine: 'x86_64',\n    number_of_cpus: 2,\n    file_date: '2019-02-10',\n    file: 'cpu_test2.json',\n    statistics: {\n      cpu: seedCpus(50, now),\n      memory: seedMems(50, now),\n    }\n  });\n  db.stats.add({\n    id: 3,\n    nodename: '192.168.000.123',\n    sysname: 'Linux',\n    release: '1.7.0',\n    machine: 'x86_64',\n    number_of_cpus: 2,\n    file_date: '2019-02-11',\n    file: 'cpu_test3.json',\n    statistics: {\n      cpu: seedCpus(50, now),\n      memory: seedMems(50, now),\n    }\n  });\n});\ndb.open();\n\nexport default db;\n","import db from './../db';\n\nconst TABLE = 'stats';\n\nexport const createStat = (stat) => {\n  db.table(TABLE)\n    .add(stat)\n    .then(id => {\n      console.log('added to indexedDB', id)\n    })\n};\n\nexport const fetchStats = () => {\n  return db.table(TABLE)\n    .toArray();\n};\n\nexport const fetchStat = (id) => {\n  return db.table(TABLE)\n    .get(id);\n};\n\nexport const deleteStat = (id) => {\n  return db.table(TABLE)\n    .delete(id);\n};\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Header from './Header';\nimport Uploader from  './Uploader';\nimport History from './History';\nimport Graph from './Graph'\nimport {\n  createStat,\n  fetchStats,\n  fetchStat,\n  deleteStat,\n} from './../libs/usecase';\n\n\nconst StyledBody = styled.div`\n  margin: 30px 10px;\n`;\n\nconst GraphWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst App = () => {\n  const [mode, setMode] = useState(\"upload\");\n  const [stat, setStat] = useState({});\n  const [stats, setStats] = useState([]);\n\n  useEffect(() => {\n    fetchStats()\n      .then(stats =>\n        // slice only meta data\n        setStats(stats.map(stat => ({\n          id: stat.id,\n          nodename: stat.nodename,\n          sysname: stat.sysname,\n          release: stat.release,\n          machine: stat.machine,\n          number_of_cpus: stat.number_of_cpus,\n          file_date: stat.file_date,\n          file: stat.file,\n        })))\n      )\n  }, [])\n\n  const onSelectStat = (id) => {\n    fetchStat(id)\n      .then(stat => {\n        setStat(stat);\n        setMode(\"visualize\");\n      })\n  };\n\n  const onDeleteStat = (id) => {\n    deleteStat(id)\n      .then(() => {\n        setStats(stats.filter(stat => stat.id !== id));\n      })\n  }\n\n  // this app is simple enough to not use routing\n  let body;\n  const renderBody = () => {\n    if (mode === \"upload\") {\n      body = (\n        <Uploader\n          setMode={setMode}\n          setStat={setStat}\n          saveStat={createStat}\n          stats={stats}\n        />\n      );\n    } else if (mode === \"history\") {\n      body = (\n        <History\n          stats={stats}\n          onClickStat={onSelectStat}\n          onDeleteStat={onDeleteStat}\n        />\n      );\n    } else if (mode === \"visualize\" && Object.keys(stat).length > 0) {\n      body = (\n        <GraphWrapper>\n          <Graph\n            title=\"TEMONA\"\n            data={stat.statistics.cpu}\n            kinds={['user', 'nice', 'system', 'iowait', 'steal', 'idle']}\n          />\n          <Graph\n            title=\"Memory\"\n            data={stat.statistics.memory}\n            kinds={['free', 'used', 'used_percent', 'buffers', 'cached']}\n          />\n        </GraphWrapper>\n      );\n    }\n\n    return (\n      <StyledBody>\n        {body}\n      </StyledBody>\n    );\n  };\n\n  return (\n    <div>\n      <Header mode={mode} onChangeMode={setMode} />\n      {renderBody()}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}